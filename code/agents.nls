buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".
    
  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  desire
  intentions
  beliefs
  
  capacity
]
 
globals [graph]

to init-buses
  ; Initialize your agents here.
  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
  init-desire
  init-intentions
  init-beliefs
  init-capacity  
end

to init-desire
  set desire "transport-passengers"
end

to init-intentions
  set intentions []
end

to-report get-schedule
  report [3 9 8 6 8 2 8 9 3 20 12 15 18 15 12 20 21 22 0 14 23 19 1 7 13 10 17 11 16 5 4 3]
end

to init-beliefs
  set beliefs get-schedule ; Insert fixed schedule here 
end

to init-capacity 
  if bus_type = 1 [
    set capacity bus_type1_capacity
  ]
  if bus_type = 2 [
    set capacity bus_type2_capacity
  ]
  if bus_type = 3 [
    set capacity bus_type3_capacity
  ]
end

to-report get-available-spots
  ifelse is-turtle? self = false [
    show (word "ERROR: get-available-spot is a command for a bus")
    report -1 
  ] [
   report (capacity - (length bus_passengers)) 
  ]
end

to execute-actions
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'.
  update-beliefs
  update-desire
  update-intentions
  
  let intention (item 0 intentions)
  show intention
  if intention = "manage-passengers" [
    drop-arrived-passengers
    pick-passengers 
  ]
  
  if intention = "check-amount-people" [
   ; get the number of people of the stop
   let num-passengers amount_passengers_waiting
   ; get the total capacity of the bus fleet
   let tot-capacity (sum [capacity] of buses)
   ; if necessary, ask for a new bus 
   let diff (num-passengers - tot-capacity)
   while [diff > 0] [
     ifelse diff > bus_type2_capacity [
       add-bus 3 
       set diff (diff - bus_type3_capacity) 
     ] [
       ifelse diff > bus_type1_capacity [
         add-bus 2
         set diff (diff - bus_type2_capacity) 
       ] [
         add-bus 1
         set diff (diff - bus_type1_capacity)  
       ]   
     ] 
   ]
  ]
  
  if is-number? intention [
   travel-to intention
  ]
end

to drop-arrived-passengers
  ; get the list of arrived passengers and drop them
  let arrived-passengers (filter [ passenger -> (item 1 passenger) = current_stop] bus_passengers)
  foreach arrived-passengers [ passenger -> drop-off-passenger (item 0 passenger) ]
end

to pick-passengers 
  foreach get-passengers-at-stop current_stop [
    passenger -> if get-available-spots > 0 [ pick-up-passenger (item 0 passenger) ]
  ] 
end

to update-beliefs
  ; if first stop of schedule is where the agent is, then move the first element of the list to the end
  if current_stop = item 0 beliefs [
    let tmp (item 0 beliefs)
    set beliefs (but-first beliefs)
    set beliefs lput tmp beliefs
  ]
end

to update-desire
  ; 
end

to update-intentions
  if desire = "transport-passengers" [
    ifelse empty? intentions [
      set intentions lput "manage-passengers" intentions
      if bus_id = 24 [ set intentions lput "check-amount-people" intentions ]
      add-newstop-intentions 
    ] [
      let intention item 0 intentions
      
      if is-number? intention [
        if current_stop = intention [
          set intentions but-first intentions
          add-newstop-intentions
        ] 
      ]
      if intention = "manage-passengers" or intention = "check-amount-people" [
        ; assuming that the environment is deterministic
        set intentions but-first intentions 
      ] 
    ]
  ]
end

to add-newstop-intentions
  set intentions lput (item 0 beliefs) intentions
  set intentions lput "manage-passengers" intentions
  if bus_id = 24 [ set intentions lput "check-amount-people" intentions ]
end


; Stop the bus
; if the bus delivered every passenger and there are no more passengers that require a transportation, desire to stop
; let pending-passengers 0
;  let c 0
;  while [ c < (length graph) ] [
;    set pending-passengers (pending-passengers + (length (get-passengers-at-stop c)))
;  ]
;  if pending-passengers = 0 and get-available-spots = capacity [
;    set desire "Stop"
;  ]

